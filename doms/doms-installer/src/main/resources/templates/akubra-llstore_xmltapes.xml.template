<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
     http://www.springframework.org/schema/util  http://www.springframework.org/schema/util/spring-util-3.1.xsd">

    <import resource="xmlTapesConfig.xml"/>

    <!--see http://biasedbit.com/redis-jedispool-configuration/-->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- Action to take when trying to acquire a connection and all connections are taken -->
        <property name="whenExhaustedAction">
            <!-- Default behaviour, block the caller until a resource becomes available -->
            <util:constant static-field="org.apache.commons.pool.impl.GenericObjectPool.WHEN_EXHAUSTED_BLOCK"/>
        </property>
        <!-- Maximum active connections to Redis instance -->
        <property name="maxActive" value="10"/>
        <!-- Number of connections to Redis that just sit there and do nothing -->
        <property name="maxIdle" value="5"/>
        <!-- Minimum number of idle connections to Redis - these can be seen as always open and ready to serve -->
        <property name="minIdle" value="1"/>
        <!-- Tests whether connection is dead when connection retrieval method is called -->
        <property name="testOnBorrow" value="true"/>
        <!-- Tests whether connection is dead when returning a connection to the pool -->
        <property name="testOnReturn" value="true"/>
        <!-- Tests whether connections are dead during idle periods -->
        <property name="testWhileIdle" value="true"/>
        <!-- Maximum number of connections to test in each idle check -->
        <property name="numTestsPerEvictionRun" value="10"/>
        <!-- Idle connection checking period -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- Maximum time, in milliseconds, to wait for a resource when exausted action is set to WHEN_EXAUSTED_BLOCK -->
        <property name="maxWait" value="30000"/>
    </bean>


    <!--Standard-->
    <bean name="org.fcrepo.server.storage.lowlevel.ILowlevelStorage"
          class="org.fcrepo.server.storage.lowlevel.akubra.AkubraLowlevelStorageModule">
        <constructor-arg index="0">
            <map/>
        </constructor-arg>
        <constructor-arg index="1" ref="org.fcrepo.server.Server"/>
        <constructor-arg index="2" type="java.lang.String"
                         value="org.fcrepo.server.storage.lowlevel.ILowlevelStorage"/>
        <property name="impl"
                  ref="org.fcrepo.server.storage.lowlevel.akubra.AkubraLowlevelStorage"/>
    </bean>

    <bean name="org.fcrepo.server.storage.lowlevel.akubra.AkubraLowlevelStorage"
          class="org.fcrepo.server.storage.lowlevel.akubra.AkubraLowlevelStorage"
            >
        <constructor-arg ref="tapeObjectStore">
            <description>The store of serialized Fedora objects</description>
            <!--Here we reference our tape system-->
        </constructor-arg>
        <constructor-arg ref="tapeDatastreamStore">
            <description>The store of datastream content</description>
        </constructor-arg>
        <constructor-arg value="false"><!--This is set to false, as we do not ever delete stuff-->
            <description>if true, replaceObject calls will be done in a way
                that
                ensures the old content is not deleted until the new content is safely
                written. If the objectStore already does this, this should be
                given as
                false
            </description>
        </constructor-arg>
        <constructor-arg value="false">
            <description>save as above, but for datastreamStore</description>
        </constructor-arg>
    </bean>

    <!--This is the tape store Akubra Implementation-->
    <bean name="tapeObjectStore"
          class="dk.statsbiblioteket.metadatarepository.xmltapes.akubra.XmlTapesBlobStore"
            >
        <constructor-arg value="urn:example.org:tapeObjectStore"/>
        <!--This parameter is the name of the storage. -->
        <property name="archive" ref="cacheTapeObjectStore"/>
        <!--And this is the reference to the actual implementation-->

    </bean>


    <!--The cache tape object store holds the objects while it is being written and until the taper is ready
    to tape the object-->
    <bean name="cacheTapeObjectStore"
          class="dk.statsbiblioteket.metadatarepository.xmltapes.cacheStore.CacheStore"

            >
        <!--Where to store files until the taper is ready to tape them-->
        <constructor-arg value="#{tapeObjectConfig.cachingDir}" index="0"/>
        <!--Where to store files while they are still being written-->
        <constructor-arg value="#{tapeObjectConfig.tempDir}" index="1"/>
        <!--The two adresses above must be on the same file system as we rely on atomic moves-->

        <!--The delegate for read operations-->
        <property name="delegate" ref="tapingTapeObjectStore"/>
    </bean>


    <!--The cache tape object store holds the objects while it is being written and until the taper is ready
     to tape the object-->
    <bean name="tapingTapeObjectStore"
          class="dk.statsbiblioteket.metadatarepository.xmltapes.tapingStore.TapingStore"
          init-method="init"
            >
        <!--Where to store files until the taper is ready to tape them-->
        <constructor-arg value="#{tapeObjectConfig.tapingDir}" index="0" type="java.io.File"/>

        <!--The delay between invocations of the taper-->
        <property name="delay" value="#{tapeObjectConfig.tapeWaitBeforeStartInMS}"/>

        <property name="delegate" ref="tarTapeObjectStore"/>

        <!--The cache, to get the objects ready for writing-->
        <property name="cache" ref="cacheTapeObjectStore"/>
        <property name="task" ref="taperObjectStore"/>

    </bean>


    <bean name="taperObjectStore"
          class="dk.statsbiblioteket.metadatarepository.xmltapes.tapingStore.Taper">
        <constructor-arg name="cacheStore" ref="cacheTapeObjectStore"/>
        <constructor-arg name="tapingStore" ref="tapingTapeObjectStore"/>
        <constructor-arg name="tapeArchive" ref="tarTapeObjectStore"/>
        <property name="tapeDelay" value="#{tapeObjectConfig.minAgeToTapeInMS}"/>
    </bean>

    <!--The guts of the tape system-->
    <bean name="tarTapeObjectStore"
          class="dk.statsbiblioteket.metadatarepository.xmltapes.tarfiles.TapeArchiveImpl"
          init-method="init"
            >
        <!--Change the init-method to init, if you do not want to rebuild the redis index on server startup -->

        <!--This constructor argument specifies the tape store location. -->
        <constructor-arg value="#{tapeObjectConfig.tapeDir}"/>
        <!--This specifies the maximum length a tape can be before a new tape is started-->
        <constructor-arg value="#{tapeObjectConfig.tapeSize}"/>
        <!--10 MB-->
        <!--This is the reference to the index-->
        <property name="index" ref="$OBJECT_INDEX$"/>
        <!--Remove broken records from the newest tape when initialising-->
        <property name="fixErrors" value="#{tapeObjectConfig.fixErrorsOnRestart}"/>
        <!--Reindex all the tape files when initialising-->
        <property name="rebuild" value="#{tapeObjectConfig.rebuildIndexFromTapesOnRestart}"/>

        <!--Extension of the tape files-->
        <constructor-arg value="#{tapeObjectConfig.tapeExtension}"/>

        <!--prefix for the tape files-->
        <constructor-arg value="#{tapeObjectConfig.tapePrefix}"/>

        <!--prefix for the temp tape files-->
        <constructor-arg value="#{tapeObjectConfig.tempTapePrefix}"/>
    </bean>


    <!--This is our Redis index-->
    <bean name="redisObjectIndex" class="dk.statsbiblioteket.metadatarepository.xmltapes.redis.RedisIndex"
            >
        <constructor-arg type="redis.clients.jedis.JedisPoolConfig" ref="jedisPoolConfig" index="3"/>
        <!--The redis server-->
        <constructor-arg value="#{tapeObjectConfig.redisHost}" index="0"/>
        <!--The port it is running on-->
        <constructor-arg value="#{tapeObjectConfig.redisPort}" index="1"/>
        <!--The database name. Redis databases are always identified by integers-->
        <constructor-arg value="#{tapeObjectConfig.redisDB}" index="2"/>
    </bean>

    <!--This is our Postgres index-->
    <bean name="postgresObjectIndex" class="dk.statsbiblioteket.metadatarepository.xmltapes.sqlindex.SQLIndex"
            >
        <!-- database driver class -->
        <constructor-arg value="#{tapeObjectConfig.dbDriver}" index="0"/>
        <!--The jdbc url-->
        <constructor-arg value="#{tapeObjectConfig.jdbcUrl}" index="1"/>
        <!--The database username-->
        <constructor-arg value="#{tapeObjectConfig.dbUser}" index="2"/>
        <!--The database password-->
        <constructor-arg value="#{tapeObjectConfig.dbPass}" index="3"/>
    </bean>
    
    <!--This is the tape store Akubra Implementation-->
    <bean name="tapeDatastreamStore"
          class="dk.statsbiblioteket.metadatarepository.xmltapes.akubra.XmlTapesBlobStore"
            >
        <constructor-arg value="urn:example.org:tapeDatastreamStore"/>
        <!--This parameter is the name of the storage. -->
        <property name="archive" ref="cacheTapeDatastreamStore"/>
        <!--And this is the reference to the actual implementation-->

    </bean>


    <!--The cache tape Datastream  store holds the Datastream s while it is being written and until the taper is ready
    to tape the Datastream -->
    <bean name="cacheTapeDatastreamStore"
          class="dk.statsbiblioteket.metadatarepository.xmltapes.cacheStore.CacheStore"

            >
        <!--Where to store files until the taper is ready to tape them-->
        <constructor-arg value="#{tapeDatastreamConfig.cachingDir}" index="0"/>
        <!--Where to store files while they are still being written-->
        <constructor-arg value="#{tapeDatastreamConfig.tempDir}" index="1"/>
        <!--The two adresses above must be on the same file system as we rely on atomic moves-->

        <!--The delegate for read operations-->
        <property name="delegate" ref="tapingTapeDatastreamStore"/>
    </bean>


    <!--The cache tape Datastream store holds the Datastreams while it is being written and until the taper is ready
     to tape the Datastream-->
    <bean name="tapingTapeDatastreamStore"
          class="dk.statsbiblioteket.metadatarepository.xmltapes.tapingStore.TapingStore"
          init-method="init"
            >
        <!--Where to store files until the taper is ready to tape them-->
        <constructor-arg value="#{tapeDatastreamConfig.tapingDir}" index="0"/>

        <!--The delay between invocations of the taper-->
        <property name="delay" value="#{tapeDatastreamConfig.tapeWaitBeforeStartInMS}"/>

        <property name="delegate" ref="tarTapeDatastreamStore"/>

        <!--The cache, to get the Datastreams ready for writing-->
        <property name="cache" ref="cacheTapeDatastreamStore"/>
        <property name="task" ref="taperDatastreamStore"/>

    </bean>


    <bean name="taperDatastreamStore"
          class="dk.statsbiblioteket.metadatarepository.xmltapes.tapingStore.Taper">
        <constructor-arg name="cacheStore" ref="cacheTapeDatastreamStore"/>
        <constructor-arg name="tapingStore" ref="tapingTapeDatastreamStore"/>
        <constructor-arg name="tapeArchive" ref="tarTapeDatastreamStore"/>
        <property name="tapeDelay" value="#{tapeDatastreamConfig.minAgeToTapeInMS}"/>
    </bean>

    <!--The guts of the tape system-->
    <bean name="tarTapeDatastreamStore"
          class="dk.statsbiblioteket.metadatarepository.xmltapes.tarfiles.TapeArchiveImpl"
          init-method="init"
            >
        <!--Change the init-method to init, if you do not want to rebuild the redis index on server startup -->

        <!--This constructor argument specifies the tape store location. -->
        <constructor-arg value="#{tapeDatastreamConfig.tapeDir}"/>
        <!--This specifies the maximum length a tape can be before a new tape is started-->
        <constructor-arg value="#{tapeDatastreamConfig.tapeSize}"/>
        <!--10 MB-->
        <!--This is the reference to the index-->
        <property name="index" ref="$DATASTREAM_INDEX$"/>
        <!--Remove broken records from the newest tape when initialising-->
        <property name="fixErrors" value="#{tapeDatastreamConfig.fixErrorsOnRestart}"/>
        <!--Reindex all the tape files when initialising-->
        <property name="rebuild" value="#{tapeDatastreamConfig.rebuildIndexFromTapesOnRestart}"/>

        <!--Extension of the tape files-->
        <constructor-arg value="#{tapeDatastreamConfig.tapeExtension}"/>

        <!--prefix for the tape files-->
        <constructor-arg value="#{tapeDatastreamConfig.tapePrefix}"/>

        <!--prefix for the temp tape files-->
        <constructor-arg value="#{tapeDatastreamConfig.tempTapePrefix}"/>
    </bean>


    <!--This is our Redis index-->
    <bean name="redisDatastreamIndex" class="dk.statsbiblioteket.metadatarepository.xmltapes.redis.RedisIndex"
            >
        <constructor-arg type="redis.clients.jedis.JedisPoolConfig" ref="jedisPoolConfig" index="3"/>
        <!--The redis server-->
        <constructor-arg value="#{tapeDatastreamConfig.redisHost}" index="0"/>
        <!--The port it is running on-->
        <constructor-arg value="#{tapeDatastreamConfig.redisPort}" index="1"/>
        <!--The database name. Redis databases are always identified by integers-->
        <constructor-arg value="#{tapeDatastreamConfig.redisDB}" index="2"/>
    </bean>

    <!--This is our Postgres index-->
    <bean name="postgresDatastreamIndex" class="dk.statsbiblioteket.metadatarepository.xmltapes.sqlindex.SQLIndex"
            >
        <!-- database driver class -->
        <constructor-arg value="#{tapeDatastreamConfig.dbDriver}" index="0"/>
        <!--The jdbc url-->
        <constructor-arg value="#{tapeDatastreamConfig.jdbcUrl}" index="1"/>
        <!--The database username-->
        <constructor-arg value="#{tapeDatastreamConfig.dbUser}" index="2"/>
        <!--The database password-->
        <constructor-arg value="#{tapeDatastreamConfig.dbPass}" index="3"/>
    </bean>

</beans>